#+title: React & Vite Project 04

* React + Vite
This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [[https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md][vitejs/plugin-react]] uses [[https://babeljs.io/][Babel]] for Fast Refresh
- [[https://github.com/vitejs/vite-plugin-react-swc][vitejs/plugin-react-swc]] uses [[https://swc.rs/][SWC]] for Fast Refresh

* Create the Project
+ The following command is going to create the project.
+ Then just answer the different questions generated by the script to complete the process of creation
#+begin_src bash
npm init vite@latest
#+end_src

* Start the Server
#+begin_src bash
npm run dev
#+end_src

* TailwindCSS
** Installation
#+begin_src bash
npm i -D tailwindcss postcss autoprefixer
#+end_src
** Configuration
*** Step 01
The following command will create two config files: tailwind.config.js and postcss.config.js
#+begin_src bash
npx tailwindcss init -p
#+end_src
*** Step 02
Look for the file src/index.css that was created by vite and add the following commands
#+begin_src css
@tailwind base;
@tailwind components;
@tailwind utilities;
#+end_src
*** Step 03
Open the file named tailwind.config.js that was created in the first step, and change it with the following content
#+begin_src js
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
}
#+end_src

* Dependencies
** React Router Dom
The previews projects were a single page website that according with certain logics it was decided the components that were shown to the user. Moreover, in projects that are a bit more medium or large size, it is a good practice to use a routing library in order to have several pages for a website. That way, it is going to be easier to keep a cleaner code and structure.
There are several alternatives but for this project, it was decided to use react-router-dom
*** Installation
#+begin_src bash
npm install react-router-dom
#+end_src
*** Use Guide by Steps
**** Part01
***** Steps
+ Delete the default component App.jsx and its reference from main.jsx
+ Import the components from react-router-dom
#+begin_src rjsx
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
#+end_src
+ Add the RouterProvider component to be display instead of app.jsx
#+begin_src rjsx
ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <RouterProvider />
  </React.StrictMode>,
)
#+end_src
+ Define a router in main.jsx or in a separete file using the function createBrowserRouter
#+begin_src jsx
const router = createBrowserRouter([
  {
    path: '/',
    element: <h1>Inicio</h1>
  }
]);
#+end_src
+ Add the router as a props to RouterProvider
#+begin_src jsx
ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>,
)
#+end_src
***** Part01 Result
#+begin_src jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import { createBrowserRouter, RouterProvider } from 'react-router-dom';

const router = createBrowserRouter([
  {
    path: '/',
    element: <h1>Inicio</h1>
  }
]);

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>,
)
#+end_src
**** Part02
***** Steps
+ Create a Layout.jsx file so it can be share by the different pages. Useful component where you and add components like the Header and Footer
+ Import the Outlet component from the library react-router-dom in Layout.jsx so it can display the content of the other pages (A dynamic container)
+ Import the Layout file in main.jsx
+ Update the router to include the layout
***** Part02 Result
#+begin_src jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import { createBrowserRouter, RouterProvider } from 'react-router-dom';

import Layout from './components/Layout';
import NuevoCliente from './pages/NuevoCliente';
import Index from './pages/Index';

const router = createBrowserRouter([
  {
    path: '/',
    element: <Layout />,
    children: [
      {
        index: true,
        element: <Index />
      },
      {
        path: '/clientes/nuevo',
        element: <NuevoCliente />
      }
    ]
  },
]);

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>,
)
#+end_src

* Extra notes
** The Link component
+ It is a react-router-dom component used as an alternative to the html tag <a/> in order to create a more effiencient links in react
#+begin_src jsx
import { Outlet, Link, useLocation } from 'react-router-dom';

const location = useLocation();

<Link
  className={`${location.pathname === '/' ? 'text-blue-300' : 'text-white'} text-2xl block mt-2 hover:text-blue-300`}
  to="/"
>Clientes</Link>
#+end_src
** The NavLink component
+ It is an alternative to link that doesn't require the use of useLocation().pathname to identify if the link is active
+ Although there it doesn't work as intended all the time, some is better to keep using Link with the ternary logic
#+begin_src js
import { Outlet, NavLink } from 'react-router-dom';

<NavLink
  className={({isActive}) => isActive ? 'text-blue-300 text-2xl block mt-2' : 'text-white text-2xl block mt-2'}
  to="/"
>Clientes </NavLink>
#+end_src
** Loader (GET)
+ It is an alternative to a react State component to retrieve an API's data to display it in a component
+ For this exercise it was create a loader function with keyword export in order to make use of it from the parent component
+ It is imported in main.jsx using the curly brackets due to it not being the default export.
+ Finally, it is imported in the component that contains the loader function the component useLoaderData from react-router-dom. By doing that, the information send by the loader is going to be available
** Actions (POST)
+ It is React Router Dom hook used to send data through out a form component called Form.
+ It is an alternative to how it was managed the form in previews projects
+ To use it is necessary to follow similar steps used in Loader
+ To retrieve the data from the inputs is necessary to extract it from the default parameter {request} and use the function formData.
+ Because we are dealing with a request is necessary the action function is async
#+begin_src js
export async function action({ request }) {

  const formData = await request.formData();

  // Extract the input information with the name empresa
  console.log(formData.get('empresa'));

  // Extract all the inputs information
  console.log([...formData]);

  // Extract all the inputs information in a single object
  const datos = Object.fromEntries(formData);
  console.log(datos);

  return null;
}

#+end_src
** errorElement
+ It is a React Router DOM component to create a custom error
+ Similar to loader and action, it is necesary to add it an prop for the index component in main.jsx
+ An example could be found in the file ErrorPage.jsx in components/
** useNavigate
+ It is another React Router Dom hook that is used to navigate using keys or after fulfill a condition
+ To use it just creat an instance of useNavigate and call it using the route as a parameter or use -1 to address to the previews visited link
#+begin_src jsx
<button
    className="bg-blue-800 text-white px-3 py-1 font-bold uppercase"
    onClick={() => navigate('/')}
>Volver</button>
#+end_src

** JSON-Server
+ It is an npm package to simulate a REST API for front-end developers
*** Installation
#+begin_src bash
npm i --location=global json-server
#+end_src
*** Usage
+ Create a file named db.json
+ Start running the server with the following command
+ You can change the default port by adding --port
#+begin_src bash
json-server --watch db.json
#+end_src

** .env
+ It is file to define some development variables like user and the API link
+ All those development variables requires the name start with VITE
+ For this example it was create the variables VITE_API_URL = ...  and VITE_DB_USUARIO = root
+ It is posible to access the date in those variables with console.log(import.meta.env);
